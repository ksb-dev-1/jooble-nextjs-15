datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  JOB_SEEKER
  RECRUITER
  NOT_ASSIGNED
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole   @default(NOT_ASSIGNED)
  savedJobs     SavedJob[] @relation("UserSavedJobs")
  postedJobs    Job[]      @relation("UserPostedJobs")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Job {
  id           String     @id @default(cuid())
  companyLogo  String?
  companyName  String
  experience   String
  role         String
  type         String
  location     String
  workMode     String
  salary       Int
  skills       String[]
  openings     Int
  applications Int
  description  String?
  savedByUsers SavedJob[] @relation("JobSavedByUsers")
  postedBy     User       @relation("UserPostedJobs", fields: [postedById], references: [id], onDelete: Cascade)
  postedById   String // Foreign key for the user who posted the job

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

model SavedJob {
  id        String   @id @default(cuid())
  user      User     @relation("UserSavedJobs", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  job       Job?     @relation("JobSavedByUsers", fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  createdAt DateTime @default(now())
}
